// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StomatoloskaOrdinacija.WebAPI.Database;

namespace StomatoloskaOrdinacija.WebAPI.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200705052705_dontNeedSomeThings")]
    partial class dontNeedSomeThings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Dijagnoza", b =>
                {
                    b.Property<int>("DijagnozaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("DijagnozaId");

                    b.ToTable("Dijagnoza");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("DrzavaId");

                    b.ToTable("Drzava");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostanskiBroj")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("GradId");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("SMALLDATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(320)")
                        .HasMaxLength(320);

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Kreirano")
                        .HasColumnType("datetime2");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Mobitel")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Spol")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId");

                    b.HasIndex("GradId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Lijek", b =>
                {
                    b.Property<int>("LijekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.HasKey("LijekId");

                    b.ToTable("Lijek");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.MedicinskiKarton", b =>
                {
                    b.Property<int>("MedicinskiKartonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int>("PregledId")
                        .HasColumnType("int");

                    b.HasKey("MedicinskiKartonId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("PregledId");

                    b.ToTable("MedicinskiKarton");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Ocjene", b =>
                {
                    b.Property<int>("OcjenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime>("Kreirano")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Ocjena")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("OcjenaId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Ocjenes");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Pacijent", b =>
                {
                    b.Property<int>("PacijentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlergijaNaLijek")
                        .HasColumnType("BIT");

                    b.Property<bool>("Aparatic")
                        .HasColumnType("BIT");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<bool>("Navlake")
                        .HasColumnType("BIT");

                    b.Property<bool>("Proteza")
                        .HasColumnType("BIT");

                    b.Property<bool>("Terapija")
                        .HasColumnType("BIT");

                    b.HasKey("PacijentId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Pacijenti");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Popust", b =>
                {
                    b.Property<int>("PopustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PopustDoDatuma")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PopustOdDatuma")
                        .HasColumnType("datetime2");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.Property<int>("VrijednostPopusta")
                        .HasColumnType("int");

                    b.HasKey("PopustId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Popusts");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Pregled", b =>
                {
                    b.Property<int>("PregledId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DijagnozaId")
                        .HasColumnType("int");

                    b.Property<decimal>("KolicinaOdabranogMaterijala")
                        .HasColumnType("DECIMAL(18,1)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("LijekId")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SkladisteId")
                        .HasColumnType("int");

                    b.Property<int>("TerminId")
                        .HasColumnType("int");

                    b.Property<short>("TrajanjePregleda")
                        .HasColumnType("SMALLINT");

                    b.HasKey("PregledId");

                    b.HasIndex("DijagnozaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("LijekId");

                    b.HasIndex("SkladisteId");

                    b.HasIndex("TerminId");

                    b.ToTable("Pregledi");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Pretplata", b =>
                {
                    b.Property<int>("PretplataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumPretplate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAktivna")
                        .HasColumnType("BIT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("PretplataId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Pretplatas");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.PromjenaLozinke", b =>
                {
                    b.Property<int>("PromjenaLozinkeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumPromjene")
                        .HasColumnType("SMALLDATETIME");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Vrijednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("PromjenaLozinkeID");

                    b.HasIndex("KorisnikId");

                    b.ToTable("PromjenaLozinkes");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Racun", b =>
                {
                    b.Property<int>("RacunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumIzdavanjaRacuna")
                        .HasColumnType("SMALLDATETIME");

                    b.Property<bool>("IsPlatio")
                        .HasColumnType("BIT");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("PregledId")
                        .HasColumnType("int");

                    b.Property<decimal>("UkupnaCijena")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("RacunId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PregledId");

                    b.ToTable("Racun");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Skladiste", b =>
                {
                    b.Property<int>("SkladisteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cijena")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal>("Kolicina")
                        .HasColumnType("DECIMAL(18,1)");

                    b.Property<string>("MjernaJedinica")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Proizvodjac")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UlazUSkladisteId")
                        .HasColumnType("int");

                    b.Property<string>("Vrsta")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SkladisteId");

                    b.HasIndex("UlazUSkladisteId");

                    b.ToTable("Skladiste");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Termin", b =>
                {
                    b.Property<int>("TerminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumVrijeme")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hitan")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsNaCekanju")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsOdobren")
                        .HasColumnType("BIT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("Razlog")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("TerminId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Termini");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.UlazUSkladiste", b =>
                {
                    b.Property<int>("UlazUSkladisteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojFakture")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("SMALLDATETIME");

                    b.Property<decimal>("IznosRacuna")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.HasKey("UlazUSkladisteID");

                    b.HasIndex("KorisnikId");

                    b.ToTable("UlazUSkladiste");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UlogaId");

                    b.ToTable("Uloges");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Usluga", b =>
                {
                    b.Property<int>("UslugaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cijena")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("UslugaId");

                    b.ToTable("Usluga");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Grad", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Uloge", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.MedicinskiKarton", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Pregled", "Pregled")
                        .WithMany()
                        .HasForeignKey("PregledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Ocjene", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Usluga", "Usluga")
                        .WithMany()
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Pacijent", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", "Korisnici")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Popust", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", "Korisnici")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Usluga", "Usluga")
                        .WithMany()
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Pregled", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Dijagnoza", "Dijagnoza")
                        .WithMany()
                        .HasForeignKey("DijagnozaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", "Korisnici")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Lijek", "Lijek")
                        .WithMany()
                        .HasForeignKey("LijekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Skladiste", "Skladiste")
                        .WithMany()
                        .HasForeignKey("SkladisteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Termin", "Termin")
                        .WithMany()
                        .HasForeignKey("TerminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Pretplata", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Usluga", "Usluga")
                        .WithMany()
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.PromjenaLozinke", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", "Korisnici")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Racun", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", "Korisnici")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Pregled", "Pregled")
                        .WithMany()
                        .HasForeignKey("PregledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Skladiste", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.UlazUSkladiste", "UlazUSkladiste")
                        .WithMany()
                        .HasForeignKey("UlazUSkladisteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.Termin", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Usluga", "Usluga")
                        .WithMany()
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.WebAPI.Database.UlazUSkladiste", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.WebAPI.Database.Korisnici", "Korisnici")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
